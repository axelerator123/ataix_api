<<<<<<< HEAD
import requests
import json
import os
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_KEY = os.getenv("API_KEY")
BASE_URL = "https://api.ataix.com"
HEADERS = {"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞ –±–∏—Ä–∂–µ)
MIN_ORDER_AMOUNT = 0.01

def get_balance(currency="USDT"):
    url = f"{BASE_URL}/api/user/balances/{currency}"
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        data = response.json()
        if "error" in data:
            if data["error"] == "Permission denied":
                logging.error("–û—à–∏–±–∫–∞ API: Permission denied. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ DATA –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö API-–∫–ª—é—á–∞.")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ API: {data['error']}")
            return 0
        return float(data.get("available", 0))
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

def get_trading_pair():
    url = f"{BASE_URL}/api/symbols"
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        data = response.json()
        pairs = [pair for pair in data if pair.get("quoteCurrency") == "USDT" and float(pair.get("minPrice", float('inf'))) <= 0.6]
        return pairs[0]["symbol"] if pairs else None
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
        return None

def get_max_bid_price(symbol):
    url = f"{BASE_URL}/api/book/{symbol}"
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        data = response.json()
        bids = data.get("bids", [])
        return max((float(order["price"]) for order in bids), default=0)
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        return 0

def place_order(symbol, price, amount):
    url = f"{BASE_URL}/api/orders"
    order_data = {"symbol": symbol, "price": price, "quantity": amount, "side": "BUY"}
    try:
        response = requests.post(url, headers=HEADERS, data=json.dumps(order_data))
        response.raise_for_status()
        data = response.json()
        return {"id": data.get("id"), "status": "NEW"}
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return {"id": None, "status": "FAILED"}

def main():
    balance = get_balance()
    logging.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")
    
    if balance == 0:
        logging.error("–ë–∞–ª–∞–Ω—Å USDT —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    symbol = get_trading_pair()
    if not symbol:
        logging.error("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.")
        return
    logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {symbol}")
    
    max_price = get_max_bid_price(symbol)
    if max_price == 0:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏.")
        return
    logging.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {max_price:.6f} USDT")
    
    order_prices = [max_price * (1 - perc) for perc in [0.02, 0.05, 0.08]]
    orders = []

    for price in order_prices:
        amount = balance / 3 / price
        if amount < MIN_ORDER_AMOUNT:
            logging.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–¥–µ—Ä: –æ–±—ä—ë–º {amount:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ")
            continue
        order = place_order(symbol, price, amount)
        orders.append(order)
=======
import json
import requests
import re

# –£–∫–∞–∂–∏—Ç–µ API-–∫–ª—é—á –∑–¥–µ—Å—å
API_KEY = "API –∫–ª—é—á"  
BASE_URL = "https://api.ataix.kz"


def get_request(endpoint):
    url = f"{BASE_URL}{endpoint}"
    headers = {
        "accept": "application/json",
        "X-API-Key": API_KEY
    }
    print(f"üì° GET {url}")  # –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–∞
    
    try:
        response = requests.get(url, headers=headers, timeout=20)
        print(f"üîÑ Response Code: {response.status_code}")
        print(f"üì• Response Body: {response.text[:500]}")  # –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
        
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def post_request(endpoint, data):
    url = f"{BASE_URL}{endpoint}"
    headers = {
        "accept": "application/json",
        "X-API-Key": API_KEY,
        "Content-Type": "application/json"
    }
    print(f"üì° POST {url} —Å –¥–∞–Ω–Ω—ã–º–∏: {json.dumps(data, indent=2)}")  

    try:
        response = requests.post(url, headers=headers, json=data, timeout=20)
        print(f"üîÑ Response Code: {response.status_code}")
        print(f"üì• Response Body: {response.text[:500]}")
        
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def get_balance(currency):
    data = get_request(f"/api/user/balances/{currency}")
    if not data:
        print("‚ùå –û—à–∏–±–∫–∞: –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        return 0
    
    print(f"‚úÖ –ë–∞–ª–∞–Ω—Å {currency}: {json.dumps(data, indent=2)}")
    
    match = re.search(r'"available"\s*:\s*"([\d.]+)"', json.dumps(data))
    return float(match.group(1)) if match else 0


def get_trading_pair():
    data = get_request("/api/symbols")
    
    if not data:
        print("‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        return None

    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã: {json.dumps(data, indent=2)}")

    for pair in data:
        if isinstance(pair, dict) and pair.get("quote") == "USDT" and float(pair.get("minPrice", 1)) <= 0.6:
            print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –ø–∞—Ä–∞: {pair.get('symbol')}")
            return pair.get("symbol")

    print("‚ö†Ô∏è –ù–µ—Ç –ø–∞—Ä—ã —Å —Ü–µ–Ω–æ–π ‚â§ 0.6 USDT")
    return None


def get_highest_bid(symbol):
    data = get_request(f"/api/orderbook/{symbol}")
    if not data or "bids" not in data:
        print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –¥–ª—è {symbol}")
        return 0

    print(f"‚úÖ –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫: {json.dumps(data, indent=2)}")

    highest_bid = max(float(order["price"]) for order in data["bids"]) if data["bids"] else 0
    print(f"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {highest_bid}")
    return highest_bid


def place_order(symbol, price, amount=10):
    order_data = {
        "symbol": symbol,
        "side": "buy",
        "type": "limit",
        "price": str(price),
        "quantity": str(amount)
    }
    response = post_request("/api/orders", order_data)

    if response:
        print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω: {response}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order_data}")

    return response


def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")

    usdt_balance = get_balance("USDT")
    print(f"üîπ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance}")
    
    if usdt_balance <= 0:
        print("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å USDT –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    pair = get_trading_pair()
    if not pair:
        print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã.")
        return
    
    highest_bid = get_highest_bid(pair)
    if highest_bid == 0:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞.")
        return
    
    order_prices = [
        round(highest_bid * 0.98, 6),
        round(highest_bid * 0.95, 6),
        round(highest_bid * 0.92, 6)
    ]
    
    orders = []
    for price in order_prices:
        order = place_order(pair, price)
        if order:
            orders.append({"order_id": order.get("id", "unknown"), "status": "NEW"})
>>>>>>> 1b1ab4c (–î–æ–±–∞–≤–∏–ª –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Ataix)
    
    with open("orders.json", "w") as f:
        json.dump(orders, f, indent=4)
    
<<<<<<< HEAD
    logging.info("–û—Ä–¥–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ orders.json")

if __name__ == "__main__":
    main()
=======
    print("‚úÖ –û—Ä–¥–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ orders.json")


if __name__ == "__main__":
    main()
>>>>>>> 1b1ab4c (–î–æ–±–∞–≤–∏–ª –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Ataix)
